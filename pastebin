- Features scope
What is the goal of the system?
Who are the users of the system? What do they need it for? How are they going to use it?
What are the inputs and outputs of the system?

  user
    user pastes content and short url is generated.
    anonymous user can also use this feature.
    By default, there is no expiration data to url.
    user can set expiration date.
  service
    service tracks analytics of page views.
    service deletes expired url.
    service has high availability.
**********
- Assumptions
What is the expected read-to-write ratio?
How many concurrent requests should we expect?
What’s the average expected response time?
What’s the limit of the data we allow users to provide?

  traffic is not evenly distributed.
  pastes are plain text only.
  
  10 million users
  read to write ratio: 10:1
  4 writes/sec
  40 read/sec
  
  Calculate usage
  content- 1 kb
  short link- 7 bytes
  expiration_length_in_minutes- 4 bytes
  paste_path- 255 bytes
  created_at- 5 bytes
  total: 1.271 bytes
  
  12.7 gb of new paste content per month
  450 gb of new paste content per three yrs
 **********
- Create a high level design
Do we want to discuss the end-to-end experience or just the API?
What clients do we want to support (mobile, web, etc)?
Do we require authentication? Analytics? Integrating with existing systems?
https://sketchboard.me/
  
  Design core components
  Component + specific APIs required for each of them.
Object oriented design for functionalities.
Map features to modules: One scenario for one module.
Consider the relationships among modules:
Certain functions must have unique instance (Singletons)
Core object can be made up of many other objects (composition).
One object is another object (inheritance)

- API design
- Pseudo code for specific components
- Data model/schema
  
  
  Scale the design
What type of database would you use and why?
What caching solutions are out there? Which would you choose and why?
What frameworks can we use as infrastructure in your ecosystem of choice?

  processing and servers
  storage
  caching
  concurrency and communication
  security
  load balancing and proxy
  CDN
  https://sketchboard.me/

  back of envelop
  10 million per month = 4 per sec
  100 million per month = 40 per sec
  1 billion per month = 400 per sec
